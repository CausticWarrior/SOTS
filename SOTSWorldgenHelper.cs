using Terraria.ID;
using System.Diagnostics;
using Terraria;
using Terraria.ModLoader;
using SOTS.Items.Otherworld;
using Microsoft.Xna.Framework;
using SOTS.Items.Pyramid;
using SOTS.Items.ChestItems;

namespace SOTS
{
	public class SOTSWorldgenHelper
	{
		public static void GenerateAcediaRoom(int x, int y, Mod mod, int direction = 1)
		{
			if (direction != 1 && direction != -1)
			{
				return;
			}
			int spawnX = x;
			int spawnY = y;
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,4,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,1,0,0},
				{0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1,1,1,1,1,1,0},
				{1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1,1,1,1},
				{1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,1},
				{0,1,1,1,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1},
				{0,0,1,1,1,1,7,3,3,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,1},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,1,1,1},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,1,1,1,1,3,1,3,3,3,4,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,5,1,3,1,3,3,3,3,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,3,8,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,2,3,3,7,3,1,1,3,8,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,1,1,1,3,3,3,3,3,8,1,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,1,1,1,5,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,11,11,11,11,11,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,11,11,11,11,11,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,11,11,3,3,3,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,3,3,3,11,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,11,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,11,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,11,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,11,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,11,11,3,3,3,11,11,1,1,7,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,11,11,3,3,3,11,11,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,11,11,11,11,11,1,1,1,1,1,1,7,3,3,3,3,3,3,3,3,10,3,3,3,3,3,3,3,7,1,1,1,1,1,1,1,11,11,11,11,11,1,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,11,1,1,1,1,1,1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,11,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,11,1,1,1,1,1,1,1,11,1,0,0,0,0,0,11,11,11,11,11,11,11,0,0,0,0,0,0,11,1,1,1,1,1,1,1,11,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,1,0,0,0,0,0,0,11,0,11,0,11,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			int PosX = spawnX - ((_structure.GetLength(1) - 1) * direction); //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = spawnY - 13;

			for (int i = -4; i < _structure.GetLength(0) + 4; i++)
			{
				for (int j = _structure.GetLength(1) + 3; j >= -4; j--)
				{
					int k = PosX + (j * direction);
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						tile.active(true);
						tile.type = (ushort)mod.TileType("PyramidSlabTile");
						tile.slope(0);
						tile.halfBrick(false);
					}
				}
			}
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + (j * direction);
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.active(true);
									tile.type = (ushort)mod.TileType("PyramidSlabTile");
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 1:
									tile.active(true);
									tile.type = (ushort)mod.TileType("OvergrownPyramidTile");
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 2:
									tile.active(true);
									tile.type = (ushort)mod.TileType("OvergrownPyramidTile");
									tile.slope((byte)(direction == 1 ? 3 : 4));
									tile.halfBrick(false);
									break;
								case 3:
									if (confirmPlatforms == 0)
									{
										tile.active(false);
										tile.halfBrick(false);
										tile.slope(0);
									}
									break;
								case 4:
									tile.active(true);
									tile.type = (ushort)mod.TileType("OvergrownPyramidTile");
									tile.slope((byte)(direction == 1 ? 4 : 3));
									tile.halfBrick(false);
									break;
								case 5:
									tile.active(true);
									tile.type = (ushort)mod.TileType("OvergrownPyramidTile");
									tile.slope((byte)(direction == 1 ? 1 : 2));
									tile.halfBrick(false);
									break;
								case 6:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k - (direction == 1 ? 1 : 0), l, (ushort)mod.TileType("CursedAppleTile"), true, true, -1, 0);
									}
									break;
								case 7:
									tile.active(true);
									tile.type = (ushort)mod.TileType("OvergrownPyramidTile");
									tile.slope(0);
									tile.halfBrick(true);
									break;
								case 8:
									tile.active(true);
									tile.type = (ushort)mod.TileType("OvergrownPyramidTile");
									tile.slope((byte)(direction == 1 ? 2 : 1));
									tile.halfBrick(false);
									break;
								case 9:
									if (confirmPlatforms == 0)
									{
										tile.active(false);
										tile.halfBrick(false);
										tile.slope(0);
									}
									break;
								case 10:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, (ushort)mod.TileType("AcediaGatewayTile"), true, true, -1, 0);
									}
									break;
								case 11:
									tile.active(true);
									tile.type = (ushort)mod.TileType("AcediaPlatingTile");
									tile.slope(0);
									tile.halfBrick(false);
									break;
							}
						}
					}
				}
			}
			_structure = new int[,] {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2},
				{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,2,2,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2},
				{0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,5,4,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			//i = vertical, j = horizontal
			for (int i = 0; i < _structure.GetLength(0); i++)
			{
				for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
				{
					int k = PosX + (j * direction);
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						switch (_structure[i, j])
						{
							case 0:
								tile.wall = 0;
								break;
							case 1:
								tile.wall = (ushort)mod.WallType("OvergrownPyramidWallWall");
								break;
							case 2:
								tile.wall = (ushort)mod.WallType("PyramidWallTile");
								break;
							case 3:
								tile.wall = 10;
								break;
							case 4:
								tile.wall = (ushort)mod.WallType("AcediaPlatingWallWall");
								break;
							case 5:
								tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
								break;
							case 6:
								tile.wall = (ushort)mod.WallType("AcediaPlatingWallWall");
								break;
						}
					}
				}
			}
		}
		public static bool Empty(int x, int y, int lengthX, int lengthY, int max = 1)
		{
			max = 1;
			int counting = 0;
			for (int i = 0; i < lengthY; i++)
			{
				for (int j = 0; j < lengthX; j++)
				{
					int k = x + j;
					int l = y + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						if (tile.active())
						{
							return false;
						}
					}
					else
                    {
						return false;
                    }
				}
			}
			return true;
		}
		public static bool GenerateSkyArtifact(int x, int y, Mod mod, bool force = false)
		{
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,1,1,1,1,1,1,1,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,0,0,0,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,4,0,0,5,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,0,0,0,3,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,2,2,2,2,3,3,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,9},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,3,2,3,3,3,3,3,3,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,6},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,3,2,2,3,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2}
			};
			int PosX = x;    //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = y - 40;

			if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5) && !force)
			{
				return false;
			}
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = 0; j < _structure.GetLength(1); j++)
					{
						int k = PosX + j;
						int l = PosY + i;
						int k2 = PosX - j;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							Tile tile2 = Framing.GetTileSafely(k2, l);
							switch (_structure[i, _structure.GetLength(1) - j - 1])
							{
								case 0:
									if (confirmPlatforms == 0)
									{
										tile.active(false);
										tile.halfBrick(false);
										tile.slope(0);
									}
									break;
								case 1:
									tile.active(true);
									tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
									tile.slope(0);
									tile.halfBrick(false);

									tile2.active(true);
									tile2.type = (ushort)mod.TileType("AvaritianPlatingTile");
									tile2.slope(0);
									tile2.halfBrick(false);
									break;
								case 2:
									tile.active(true);
									tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
									tile.type = (ushort)mod.TileType("DullPlatingTile");
									tile.slope(0);
									tile.halfBrick(false);

									tile2.active(true);
									tile2.wall = (ushort)mod.WallType("DullPlatingWallWall");
									tile2.type = (ushort)mod.TileType("DullPlatingTile");
									tile2.slope(0);
									tile2.halfBrick(false);
									break;
								case 3:
									tile.active(true);
									tile.type = (ushort)mod.TileType("PortalPlatingTile");
									tile.slope(0);
									tile.halfBrick(false);

									tile2.active(true);
									tile2.type = (ushort)mod.TileType("PortalPlatingTile");
									tile2.slope(0);
									tile2.halfBrick(false);
									break;
								case 4:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, mod.TileType("CrystalStatue"), true, true, -1, 0);

										tile2.active(false);
										tile2.slope(0);
										tile2.halfBrick(false);
										WorldGen.PlaceTile(k2 - 1, l, mod.TileType("CrystalStatue"), true, true, -1, 0);
									}
									break;
								case 5:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, mod.TileType("LockedStrangeChest"), true, true, -1, 1);

										tile2.active(false);
										tile2.slope(0);
										tile2.halfBrick(false);
										WorldGen.PlaceTile(k2 - 1, l, mod.TileType("LockedStrangeChest"), true, true, -1, 1);
									}
									break;
								case 6:
									tile.active(true);
									tile.type = (ushort)mod.TileType("PortalPlatingTile");
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 7:
									tile.active(false);
									tile.slope(0);
									tile.halfBrick(false);
									WorldGen.PlaceTile(k, l, mod.TileType("SkyChainTile"), true, true, -1, 0);

									tile2.active(false);
									tile2.slope(0);
									tile2.halfBrick(false);
									WorldGen.PlaceTile(k2, l, mod.TileType("SkyChainTile"), true, true, -1, 0);
									break;
								case 8:
									tile.active(true);
									tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
									tile.slope(0);
									tile.halfBrick(false);

									tile2.active(true);
									tile2.type = (ushort)mod.TileType("AvaritianPlatingTile");
									tile2.slope(0);
									tile2.halfBrick(false);

									Tile tile3 = Framing.GetTileSafely(k, l - 1);
									Tile tile4 = Framing.GetTileSafely(k2, l - 1);
									tile3.active(false);
									tile3.slope(0);
									tile3.halfBrick(false);
									WorldGen.PlaceTile(k, l - 1, mod.TileType("SkyChainTile"), true, true, -1, 0);

									tile4.active(false);
									tile4.slope(0);
									tile4.halfBrick(false);
									WorldGen.PlaceTile(k2, l - 1, mod.TileType("SkyChainTile"), true, true, -1, 0);
									break;
								case 9:
									tile.active(false);
									tile.slope(0);
									tile.halfBrick(false);
									WorldGen.PlaceTile(k, l, mod.TileType("AvaritianGatewayTile"), true, true, -1, 0);
									break;
							}
						}
					}
				}
			}
			int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			//i = vertical, j = horizontal
			for (int i = 0; i < _structure2.GetLength(0); i++)
			{
				for (int j = 0; j < _structure2.GetLength(1); j++)
				{
					int k = PosX + j;
					int l = PosY + i;
					int k2 = PosX - j;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						Tile tile2 = Framing.GetTileSafely(k2, l);
						switch (_structure2[i, _structure2.GetLength(1) - j - 1])
						{
							case 0:
								//tile.wall = 0;
								break;
							case 1:
								tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
								tile2.wall = (ushort)mod.WallType("PortalPlatingWallWall");
								break;
							case 2:
								tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
								tile2.wall = (ushort)mod.WallType("DullPlatingWallWall");
								break;
							case 3:
								tile.wall = 21;
								tile2.wall = 21;
								break;
						}
					}
				}
			}
			return true;
		}
		public static bool GenerateArtifactIslands(int x, int y, int type, Mod mod, int x2 = -1, int y2 = -1)
		{
			if (type == 0)
			{
				int[,] _structure = {
				{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
				{2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2},
				{0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
				{0,0,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,0,0},
				{0,0,0,4,4,0,0,4,4,4,4,4,0,0,4,4,0,0,0},
				{0,0,0,4,0,0,0,0,4,4,4,0,0,0,0,4,0,0,0},
				{0,0,0,4,0,0,0,0,4,4,4,0,0,0,0,4,0,0,0},
				{0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0}
				};
				int PosX = x - 9;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;

				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.active(false);
										WorldGen.PlaceTile(k, l, mod.TileType("SkyChainTile"), true, true, -1, 0);
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 4:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 5:
										tile.active(true);
										tile.type = (ushort)mod.TileType("PortalPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
			}
			if (type == 1)
			{
				int[,] _structure = {
				{0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,3,1,1,1,1,1,1,1},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,0,0,2,2,2,2,2,2,2,2,2,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0}
				};
				int PosX = x - 7;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 7;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
							}
						}
					}
				}
			}
			if (type == 2)
			{
				int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				{0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0},
				{1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
				{0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0},
				{1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1},
				{1,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,1},
				{1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1},
				{1,1,0,0,2,2,2,2,2,2,2,2,2,0,0,1,1},
				{1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1},
				{1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1,1},
				{1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1},
				{1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1},
				{1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1},
				{1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1},
				{1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1}
				};
				int PosX = x - 8;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 8;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 1:
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,2,3,3,3,3,3,3,3,3,3,3,3,2,1,0},
				{0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0},
				{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
								case 2:
									tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
									break;
								case 3:
									tile.wall = 21;
									break;
							}
						}
					}
				}
			}
			if (type == 3)
			{
				int[,] _structure = {
				{0,0,0,0,0,1,0,0,0,0,0},
				{0,0,0,0,2,2,2,0,0,0,0},
				{2,2,2,2,2,3,2,2,2,2,2},
				{0,4,4,4,2,2,2,4,4,4,0},
				{0,0,4,4,4,2,4,4,4,0,0},
				{0,0,0,4,4,2,4,4,0,0,0},
				{0,0,0,0,4,2,4,0,0,0,0},
				{0,0,0,0,0,2,0,0,0,0,0}
				};
				int PosX = x - 5;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 2;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.active(false);
										WorldGen.PlaceTile(k, l, (ushort)mod.TileType("SkyChainTile"), true, true, -1, 0);
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("PortalPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 4:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
			}
			if (type == 4)
			{
				int[,] _structure = {
				{0,1,1,1,1,1,1,1,1,1,1,1,0},
				{2,2,2,1,1,1,1,1,1,1,2,2,2},
				{2,3,2,2,2,2,2,2,2,2,2,3,2},
				{0,2,2,1,1,1,1,1,1,1,2,2,0},
				{0,0,0,0,1,1,1,1,1,0,2,0,0},
				{0,0,0,0,0,1,1,1,0,0,2,0,0},
				{0,0,0,0,0,1,1,1,0,0,2,0,0},
				{0,0,0,2,2,1,1,1,0,2,2,0,0},
				{0,0,2,2,0,1,1,1,2,2,0,0,0},
				{0,0,2,0,0,1,1,1,0,0,0,0,0},
				{0,0,2,0,0,1,1,1,0,0,0,0,0},
				{0,0,2,0,0,0,1,0,0,0,0,0,0},
				{0,0,2,2,0,0,1,0,0,0,0,0,0},
				{0,0,0,2,2,0,1,0,0,0,0,0,0},
				{0,0,0,0,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,0,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 0;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("PortalPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,0,0,0,0},
				{0,0,0,0,1,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,1,2,0,0,0,0,0,0},
				{0,0,0,0,1,1,2,0,0,0,0,0,0},
				{0,0,0,0,0,1,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
								case 2:
									tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
									break;
							}
						}
					}
				}
			}
			if (type == 5)
			{
				int[,] _structure = {
				{0,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,1,1,1,1},
				{1,2,2,2,2,2,2,2,2},
				{1,1,1,1,1,1,1,1,0},
				{0,2,2,2,2,2,2,1,0},
				{0,0,1,1,1,1,1,1,0},
				{0,0,1,2,2,2,2,0,0},
				{0,0,1,1,1,1,0,0,0},
				{0,0,0,2,2,1,0,0,0},
				{0,0,0,0,1,1,0,0,0},
				{0,0,0,0,1,0,0,0,0}
				};
				int PosX = x - 4;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 5;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0},
				{0,0,1,2,2,2,1,0,0},
				{0,0,1,2,3,2,1,0,0},
				{0,0,1,2,3,2,1,0,0},
				{0,0,1,2,2,2,1,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
								case 2:
									tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
									break;
								case 3:
									tile.wall = 21;
									break;
							}
						}
					}
				}

			}
			if (type == 6)
			{
				int[,] _structure = {
				{0,0,0,0,1,0,0,0,0},
				{2,2,2,2,3,2,2,2,2},
				{0,0,4,4,4,4,4,0,0},
				{0,2,2,2,2,2,2,2,0},
				{0,0,0,4,4,4,0,0,0},
				{0,0,2,2,2,2,2,0,0},
				{0,0,0,0,4,0,0,0,0},
				{0,0,0,2,2,2,0,0,0},
				{0,0,0,0,2,0,0,0,0}
				};
				int PosX = x - 4;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.active(false);
										WorldGen.PlaceTile(k, l, (ushort)mod.TileType("SkyChainTile"), true, true, -1, 0);
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 4:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
			}
			if (type == 7)
			{
				int[,] _structure = {
				{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
				{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
				{2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2},
				{0,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,0},
				{0,0,2,0,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,0,2,0,0},
				{0,0,0,0,2,0,0,0,2,2,0,0,0,0,4,4,4,0,0,0,0,2,2,0,0,0,2,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,4,2,2,2,0,0,0,2,2,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,0,0,0,2,2,0,0,4,0,0,2,2,0,0,0,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,4,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				int PosX = x - 15; //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.active(false);
										WorldGen.PlaceTile(k, l, (ushort)mod.TileType("SkyChainTile"), true, true, -1, 0);
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 4:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
							}
						}
					}
				}

			}
			if (type == 8)
			{
				int[,] _structure = {
				{0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1},
				{3,3,3,3,0,0,0,3,3,3,3,3,3,3,0,0,0,3,3,3,3},
				{3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3},
				{0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0},
				{0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0},
				{0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0},
				{0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0},
				{0,0,0,3,3,3,3,1,1,1,1,1,1,1,3,3,3,3,0,0,0},
				{0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0},
				{0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0},
				{0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0},
				{0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0},
				{0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0}
				};
				int PosX = x - 10; //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 6;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,2,2,2,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,3,3,3,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,3,3,3,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,3,3,3,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,2,2,2,2,1,0,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,0,0,2,2,0,1,1,1,1,0,0,0,0},
				{0,0,0,0,2,2,2,1,0,0,0,0,0,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,1,1,1,1,1,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,2,2,2,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,3,3,3,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,2,2,2,1,2,2,2,2,2,1,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
								case 2:
									tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
									break;
								case 3:
									tile.wall = 21;
									break;
							}
						}
					}
				}
			}
			if (type == 9)
			{
				int[,] _structure = {
				{0,0,1,1,1,1,1,1,1,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0},
				{1,1,1,1,1,2,1,1,1,1,1},
				{0,3,3,3,3,3,3,3,3,3,0},
				{0,0,3,3,3,3,3,3,3,0,0},
				{0,0,0,3,3,3,3,3,0,0,0},
				{0,0,0,0,3,3,3,0,0,0,0},
				{0,0,0,0,0,3,0,0,0,0,0}
				};
				int PosX = x - 5;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 6;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										break;
									case 1:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)mod.TileType("DullPlatingTile");
										tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				int[,] _structure2 = {
				{0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,1,2,2,2,1,0,0,0},
				{0,0,0,1,2,3,2,1,0,0,0},
				{0,0,0,1,2,3,2,1,0,0,0},
				{0,0,0,1,2,3,2,1,0,0,0},
				{0,0,0,1,2,2,2,1,0,0,0},
				{0,0,0,0,0,2,2,0,0,0,0},
				{0,2,2,2,2,2,2,2,2,2,0},
				{0,0,2,2,2,2,2,2,2,0,0},
				{0,0,0,2,2,2,2,2,0,0,0},
				{0,0,0,0,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure2.GetLength(0); i++)
				{
					for (int j = _structure2.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure2[i, j])
							{
								case 0:
									break;
								case 1:
									tile.wall = (ushort)mod.WallType("PortalPlatingWallWall");
									break;
								case 2:
									tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
									break;
								case 3:
									tile.wall = 21;
									break;
							}
						}
					}
				}
			}

			return true;
		}
		public static bool GenerateBiomeChestIslands(int x, int y, int type, Mod mod, bool residual = false)
        {
			if (residual == true)
            {
				ushort firstUniqueTile = 0;
				ushort secondUniqueTile = 0;
				if(type == 0)
                {
					firstUniqueTile = TileID.CrimtaneBrick;
					secondUniqueTile = (ushort)ModContent.TileType<DullPlatingTile>();
				}
				if (type == 1)
				{
					firstUniqueTile = TileID.DemoniteBrick;
					secondUniqueTile = (ushort)ModContent.TileType<DullPlatingTile>();
				}
				if (type == 2)
				{
					firstUniqueTile = TileID.GoldBrick;
					secondUniqueTile = TileID.CobaltBrick;
				}
				if (type == 3)
				{
					firstUniqueTile = TileID.JungleGrass;
					secondUniqueTile = TileID.Mudstone;
				}
				if (type == 4)
				{
					firstUniqueTile = TileID.IceBrick;
					secondUniqueTile = TileID.SnowBrick;
				}
				int[,] _structure = {
					{0,0,0,1,0,0,0,0,0,1,0,0,0},
					{2,2,3,3,3,2,2,2,3,3,3,2,2},
					{0,5,5,6,6,6,2,6,6,6,5,5,0},
					{0,0,5,5,6,6,2,6,6,5,5,0,0},
					{0,2,2,2,2,2,2,2,2,2,2,2,0},
					{0,0,0,5,5,6,2,6,5,5,0,0,0},
					{0,0,0,0,5,5,2,5,5,0,0,0,0},
					{0,0,0,0,0,5,2,5,0,0,0,0,0},
					{0,0,0,0,0,0,2,0,0,0,0,0,0},
					{0,0,0,0,0,0,2,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 1;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.active(false);
											tile.halfBrick(false);
											tile.slope(0);
										}
										break;
									case 1:
										if (confirmPlatforms == 0)
											tile.active(false);
										WorldGen.PlaceTile(k, l, ModContent.TileType<SkyChainTile>(), true, true, -1, 0);
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = firstUniqueTile;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 5:
										tile.active(true);
										tile.type = secondUniqueTile;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 6:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				return true;
            }
			if(type == 0)
            {
				int[,] _structure = {
				{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
				{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
				{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
				{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
				{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
				{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
				{0,2,2,2,2,2,2,2,2,2,2,2,2,0},
				{0,0,0,2,2,2,2,2,2,2,2,0,0,0},
				{0,0,0,0,2,2,2,2,2,2,0,0,0,0},
				{0,0,0,0,0,2,2,2,2,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,0,0,0,0,0,0},
				{0,0,0,0,0,0,2,2,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;

				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.active(false);
											tile.halfBrick(false);
											tile.slope(0);
										}
										break;
									case 1:
										tile.active(true);
										tile.type = 347;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.active(false);
											tile.slope(0);
											tile.halfBrick(false);
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 25);
										}
										break;
									case 4:
										tile.active(true);
										tile.type = 347;
										tile.slope(0);
										tile.halfBrick(true);
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,0,0,0,0},
				{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.wall = 0;
									break;
								case 1:
									tile.wall = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 2:
									tile.wall = 174;
									break;
								case 3:
									tile.wall = 92;
									break;
							}
						}
					}
				}
			}
			if(type == 1)
            {
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,6,6,2,2,2,2,2,2,2,2,6,6,0},
					{0,0,0,6,6,6,6,6,6,6,6,0,0,0},
					{0,0,0,0,6,6,6,6,6,6,0,0,0,0},
					{0,0,0,0,0,6,6,6,6,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.active(false);
											tile.halfBrick(false);
											tile.slope(0);
										}
										break;
									case 1:
										tile.active(true);
										tile.type = 140;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = 152;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.active(false);
											tile.slope(0);
											tile.halfBrick(false);
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 24);
										}
										break;
									case 4:
										tile.active(true);
										tile.type = 140;
										tile.slope(0);
										tile.halfBrick(true);
										break;
									case 6:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,1,1,1,1,0,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.wall = 0;
									break;
								case 1:
									tile.wall = (ushort)ModContent.WallType<DullPlatingWallWall>();
									break;
								case 2:
									tile.wall = 33;
									break;
								case 3:
									tile.wall = 88;
									break;
							}
						}
					}
				}
			}
			if(type == 2)
            {
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,6,6,2,2,2,2,2,2,2,2,6,6,0},
					{0,0,0,7,7,7,6,7,7,7,7,0,0,0},
					{0,0,0,0,6,6,6,6,6,6,0,0,0,0},
					{0,0,0,0,0,7,6,7,7,0,0,0,0,0},
					{0,0,0,0,0,0,6,7,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,7,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.active(false);
											tile.halfBrick(false);
											tile.slope(0);
										}
										break;
									case 1:
										tile.active(true);
										tile.type = 45;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = 121;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.active(false);
											tile.slope(0);
											tile.halfBrick(false);
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 26);
										}
										break;
									case 4:
										tile.active(true);
										tile.type = 45;
										tile.slope(0);
										tile.halfBrick(true);
										break;
									case 6:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<AvaritianPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 7:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,1,1,1,1,0,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,2,1,3,4,4,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.wall = 0;
									break;
								case 1:
									tile.wall = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.wall = 10;
									break;
								case 3:
									tile.wall = 89;
									break;
								case 4:
									tile.wall = 93;
									break;
							}
						}
					}
				}
			}
			if(type == 3)
            {
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,1,2,2,2,2,2,2,1,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,3,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,5,0,0,0,4,0,0,0,0,5,1,0},
					{2,1,1,1,5,5,1,1,5,5,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,7,7,2,2,2,2,2,2,2,2,7,7,0},
					{0,0,0,7,7,7,7,7,7,7,7,0,0,0},
					{0,0,0,0,7,7,7,7,7,7,0,0,0,0},
					{0,0,0,0,0,7,7,7,7,0,0,0,0,0},
					{0,0,0,0,0,0,7,7,0,0,0,0,0,0},
					{0,0,0,0,0,0,7,7,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.active(false);
											tile.halfBrick(false);
											tile.slope(0);
										}
										break;
									case 1:
										tile.active(true);
										tile.type = 60;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = 120;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										tile.active(true);
										tile.type = 62;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 4:
										if (confirmPlatforms == 1)
										{
											tile.active(false);
											tile.slope(0);
											tile.halfBrick(false);
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 23);
										}
										break;
									case 5:
										tile.active(true);
										tile.type = 60;
										tile.slope(0);
										tile.halfBrick(true);
										break;
									case 7:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,1,1,1,1,1,0,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,1,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.wall = 0;
									break;
								case 1:
									tile.wall = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.wall = 67;
									break;
								case 3:
									tile.wall = 91;
									break;
							}
						}
					}
				}

			}
			if(type == 4)
            {
				int[,] _structure = {
					{0,0,0,1,1,1,1,1,1,1,1,0,0,0},
					{0,0,1,2,2,2,2,2,2,2,2,1,0,0},
					{0,0,1,2,1,1,1,1,1,1,2,1,0,0},
					{0,1,1,1,1,0,0,0,0,1,1,1,1,0},
					{0,0,1,0,0,0,0,0,0,0,0,1,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,1,4,0,0,0,3,0,0,0,0,4,1,0},
					{2,1,1,1,4,4,1,1,4,4,1,1,1,2},
					{2,2,2,2,1,1,1,1,1,1,2,2,2,2},
					{0,6,6,2,2,2,2,2,2,2,2,6,6,0},
					{0,0,0,6,6,6,6,6,6,6,6,0,0,0},
					{0,0,0,0,6,6,6,6,6,6,0,0,0,0},
					{0,0,0,0,0,6,6,6,6,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0},
					{0,0,0,0,0,0,6,6,0,0,0,0,0,0}
				};
				int PosX = x - 6;  //spawnX and spawnY is where you want the anchor to be when this generates
				int PosY = y - 10;
				if (!Empty(PosX, PosY, _structure.GetLength(1), _structure.GetLength(0), 5))
				{
					return false;
				}
				//i = vertical, j = horizontal
				for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
				{
					for (int i = 0; i < _structure.GetLength(0); i++)
					{
						for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
						{
							int k = PosX + j;
							int l = PosY + i;
							if (WorldGen.InWorld(k, l, 30))
							{
								Tile tile = Framing.GetTileSafely(k, l);
								switch (_structure[i, j])
								{
									case 0:
										if (confirmPlatforms == 0)
										{
											tile.active(false);
											tile.halfBrick(false);
											tile.slope(0);
										}
										break;
									case 1:
										tile.active(true);
										tile.type = 206;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 2:
										tile.active(true);
										tile.type = 148;
										tile.slope(0);
										tile.halfBrick(false);
										break;
									case 3:
										if (confirmPlatforms == 1)
										{
											tile.active(false);
											tile.slope(0);
											tile.halfBrick(false);
											WorldGen.PlaceTile(k, l, 21, true, true, -1, 27);
										}
										break;
									case 4:
										tile.active(true);
										tile.type = 206;
										tile.slope(0);
										tile.halfBrick(true);
										break;
									case 6:
										tile.active(true);
										tile.type = (ushort)ModContent.TileType<DullPlatingTile>();
										tile.slope(0);
										tile.halfBrick(false);
										break;
								}
							}
						}
					}
				}
				_structure = new int[,] {
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,1,1,1,1,1,1,0,0,0,0},
					{0,0,0,2,1,1,1,1,1,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,2,1,3,3,3,3,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0}
				};
				//i = vertical, j = horizontal
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									tile.wall = 0;
									break;
								case 1:
									tile.wall = (ushort)ModContent.WallType<AvaritianPlatingWallWall>();
									break;
								case 2:
									tile.wall = 84;
									break;
								case 3:
									tile.wall = 90;
									break;
							}
						}
					}
				}
			}
			if(!residual)
			{
				int direction = Main.rand.Next(2) * 2 - 1;
				int directionV = Main.rand.Next(2) * 2 - 1;
				Vector2 tileLocation = new Vector2(x, y);
				for (int r = 0; r < 4; r++)
				{
					if (r == 1)
					{
						direction *= -1;
						directionV *= -1;
					}
					tileLocation = new Vector2(x, y);
					tileLocation.X += direction * (10 + Main.rand.Next(45));
					tileLocation.Y += directionV * Main.rand.Next(80);

					int extend = 0;
					while (!GenerateBiomeChestIslands((int)tileLocation.X, (int)tileLocation.Y, type, mod, true))
					{
						tileLocation = new Vector2(x, y);
						tileLocation.X += direction * (10 + Main.rand.Next(45 + extend));
						tileLocation.Y += directionV * (Main.rand.Next(80));
						extend += 2;
					}
				}
			}
			return true;
        }
		public static bool SkytileValid(Tile tile, Mod mod)
		{
			return tile.active() && (tile.type == (ushort)mod.TileType("DullPlatingTile") || tile.type == (ushort)mod.TileType("AvaritianPlatingTile"));
		}
		public static void DistributeSkyThings(Mod mod, int maxChests = 30, int maxDisplays = 7, int maxPotGens = 5, int maxFabricators = 3, int ratePots = 5, int rateDecor = 45)
		{
			int next = 0;
			int totalChests = 0;
			int totalDisplays = 0;
			int totalPotGens = 0;
			int totalFabricators = 0;
			for (int i = 15; i < Main.maxTilesX - 15; i++)
			{
				for (int j = Main.maxTilesY - 15; j > 15; j--)
				{
					Tile tile = Framing.GetTileSafely(i, j);
					Tile tile2 = Framing.GetTileSafely(i + 1, j);
					Tile tile3 = Framing.GetTileSafely(i + 2, j);
					if (SkytileValid(tile, mod))
					{
						if (Main.rand.Next(ratePots) == 0 && Empty(i, j - 2, 2, 2) && SkytileValid(tile2, mod))
						{
							WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("SkyPots"), true, true, -1, Main.rand.Next(9)); //pots
						}
						else if (Main.rand.Next(rateDecor) == 0 && Empty(i - 1, j - 2, 3, 2))
						{
							tile2 = Framing.GetTileSafely(i - 2, j);
							tile3 = Framing.GetTileSafely(i + 2, j);
							WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("HardlightTableTile"), true, true, -1, 0);
							if (Main.rand.Next(2) == 0 && SkytileValid(tile2, mod) && Empty(i - 2, j - 2, 1, 2))
							{
								WorldGen.PlaceTile(i - 2, j - 1, (ushort)mod.TileType("HardlightChairTile"), true, true, -1, 1);
							}
							if (Main.rand.Next(2) == 0 && SkytileValid(tile2, mod) && Empty(i + 2, j - 2, 1, 2))
							{
								WorldGen.PlaceTile(i + 2, j - 1, (ushort)mod.TileType("HardlightChairTile"), true, true, -1, 0);
							}
						}
					}
				}
			}
			while (totalChests < maxChests)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i + 2, j);
				if (SkytileValid(tile, mod))
				{
					if (Empty(i, j - 2, 2, 2) && SkytileValid(tile2, mod))
					{
						if (next % 3 == 0)
						{
							WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("LockedSkywareChest"), true, true, -1, 1);
							tile.type = TileID.Sunplate;
							tile2.type = TileID.Sunplate;
						}
						if (next % 3 == 1)
						{
							WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("LockedMeteoriteChest"), true, true, -1, 1);
							tile.type = TileID.MeteoriteBrick;
							tile2.type = TileID.MeteoriteBrick;
						}
						if (next % 3 == 2)
						{
							WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("LockedStrangeChest"), true, true, -1, 1);
							tile.type = (ushort)mod.TileType("AvaritianPlatingTile");
							tile2.type = (ushort)mod.TileType("AvaritianPlatingTile");
						}
						totalChests++;
						next++;
					}
				}
			}
			while (totalDisplays < maxDisplays)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i - 1, j);
				if (SkytileValid(tile, mod))
				{
					if (SkytileValid(tile2, mod) && SkytileValid(tile3, mod) && Empty(i - 1, j - 3, 3, 2))
					{
						WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("DigitalDisplayTile"), true, true, -1, Main.rand.Next(3));
						totalDisplays++;
					}
				}
			}
			while (totalFabricators < maxFabricators)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i - 1, j);
				if (SkytileValid(tile, mod))
				{
					if (SkytileValid(tile2, mod) && SkytileValid(tile3, mod) && Empty(i - 1, j - 3, 3, 2))
					{
						WorldGen.PlaceTile(i, j - 1, (ushort)mod.TileType("HardlightFabricatorTile"), true, true, -1, 0);
						totalFabricators++;
					}
				}
			}
			while (totalPotGens < maxPotGens)
			{
				int i = Main.rand.Next(15, Main.maxTilesX - 15);
				int j = Main.rand.Next(15, Main.maxTilesY - 15);
				Tile tile = Framing.GetTileSafely(i, j);
				Tile tile2 = Framing.GetTileSafely(i + 1, j);
				Tile tile3 = Framing.GetTileSafely(i, j + 1);
				Tile tile4 = Framing.GetTileSafely(i + 1, j + 1);
				if (SkytileValid(tile, mod))
				{
					if (SkytileValid(tile2, mod) && SkytileValid(tile3, mod) && SkytileValid(tile4, mod) && Empty(i, j - 2, 2, 2))
					{
						tile.active(false);
						tile2.active(false);
						ModTileEntity modTileEntity = ModTileEntity.GetTileEntity(mod.TileEntityType("PotTimer"));
						WorldGen.PlaceTile(i, j, (ushort)mod.TileType("PotGeneratorTile"), true, true, -1, 0);
						modTileEntity.Place(i, j);
						tile.wall = (ushort)mod.WallType("DullPlatingWallWall");
						tile2.wall = (ushort)mod.WallType("DullPlatingWallWall");
						totalPotGens++;
					}
				}
			}
		}
		public static bool GeneratePlanetariumFull(Mod mod, int i, int j, bool force = false)
		{
			Vector2 tileLocation = new Vector2(i, j);
			if (!SOTSWorldgenHelper.GenerateSkyArtifact((int)tileLocation.X, (int)tileLocation.Y, mod, force))
			{
				return false;
			}
			for (int r = 0; r < 30; r++)
			{
				tileLocation = new Vector2(i, j);
				if (Main.rand.Next(2) == 0)
				{
					tileLocation.X += Main.rand.Next(300);
				}
				else
				{
					tileLocation.X -= Main.rand.Next(300);
				}

				if (Main.rand.Next(2) == 0)
				{
					tileLocation.Y += Main.rand.Next(50);
				}
				else
				{
					tileLocation.Y -= Main.rand.Next(36) + 50;
				}

				int extend = 0;
				while (!SOTSWorldgenHelper.GenerateArtifactIslands((int)tileLocation.X, (int)tileLocation.Y, r % 10, mod))
				{
					tileLocation = new Vector2(i, j);
					if (Main.rand.Next(2) == 0)
					{
						tileLocation.X += Main.rand.Next(300 + extend);
					}
					else
					{
						tileLocation.X -= Main.rand.Next(300 + extend);
					}

					if (Main.rand.Next(2) == 0)
					{
						tileLocation.Y += Main.rand.Next(50);
					}
					else
					{
						tileLocation.Y -= Main.rand.Next(36) + 50;
					}

					extend++;
				}
			}
			int direction = Main.rand.Next(2) * 2 - 1;
			for (int r = 0; r < 2; r++)
			{
				int type = 2;
				if (r == 1)
				{
					direction *= -1;
					type = 4;
				}
				tileLocation = new Vector2(i, j);
				tileLocation.X += direction * (150 + Main.rand.Next(240));
				tileLocation.Y += Main.rand.Next(50);

				int extend = 0;
				while (!GenerateBiomeChestIslands((int)tileLocation.X, (int)tileLocation.Y, type, mod))
				{
					tileLocation = new Vector2(i, j);
					tileLocation.X += direction * (150 + Main.rand.Next(240));
					tileLocation.Y += Main.rand.Next(50);
					extend++;
				}
			}
			SOTSWorldgenHelper.DistributeSkyThings(mod, 30, 7, 10, 4, 5, 45);
			return true;
		}
		public static void GenerateCoconutIsland(Mod mod, int x, int y, int direction = 1)
		{
			if(direction != 1 && direction != -1)
            {
				return;
            }
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,4,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,7,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,6,0,0,2,2,2,7,11,11,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,6,0,12,12,12,12,12,12,2,2,7,11,11,11,11,11,11,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0},
				{0,0,12,12,12,12,12,12,12,12,12,12,2,11,7,7,11,11,11,11,11,11,14,0,9,0,0,0,0,0,0,0,0,0,12,12,12,12,12,0,6,0,0,0,0},
				{15,12,12,12,12,12,12,12,12,12,12,2,2,11,11,7,11,7,11,11,11,11,11,11,11,11,11,13,0,0,0,0,12,12,12,12,12,12,12,12,12,12,0,0,15},
				{15,15,12,12,12,12,12,12,12,12,2,2,2,2,2,11,11,7,7,7,11,11,16,11,11,11,11,11,11,11,7,7,12,12,12,12,12,12,12,12,17,17,17,17,15},
				{0,15,17,12,12,12,12,12,2,2,2,2,2,2,2,2,11,7,7,11,7,11,11,11,11,11,7,7,7,7,7,12,12,12,12,12,12,12,17,17,17,15,15,15,19},
				{0,15,15,17,17,12,12,12,12,12,12,2,2,2,7,7,7,7,11,7,7,11,11,11,7,7,7,7,12,12,12,12,12,12,12,12,17,17,17,17,15,15,19,0,0},
				{0,0,15,15,17,17,17,12,12,12,2,2,2,2,2,2,2,7,7,7,7,11,11,11,7,7,7,12,12,12,12,12,12,12,12,17,17,17,17,15,15,19,0,0,0},
				{0,0,0,15,15,15,17,17,12,12,12,12,12,2,2,2,2,7,2,7,11,11,11,7,7,12,12,12,12,12,12,12,12,12,17,17,17,15,15,15,0,0,0,0,0},
				{0,0,0,0,0,15,15,15,17,12,12,12,12,12,12,2,2,7,2,7,11,11,7,7,12,12,12,12,12,12,12,12,12,17,17,15,15,15,0,0,0,0,0,0,0},
				{0,0,0,0,0,20,15,15,15,17,12,12,12,2,2,2,2,2,2,7,11,7,7,12,12,12,12,12,12,12,12,12,17,17,15,15,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,15,15,15,17,12,12,12,12,2,2,2,2,7,2,7,2,12,12,12,12,12,12,12,12,12,17,15,15,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,20,15,17,17,17,17,12,12,12,2,2,2,2,7,2,2,12,12,12,12,12,12,17,17,15,15,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,15,15,17,17,17,17,17,12,12,12,12,2,2,2,2,12,12,12,12,12,17,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,15,15,15,15,17,17,17,17,17,2,2,2,2,2,2,12,15,17,17,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,20,15,15,15,15,17,17,2,2,2,2,2,2,15,15,15,15,15,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,15,15,17,17,17,15,2,2,2,2,2,15,15,0,0,0,0,21,0,3,2,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,17,10,10,2,2,2,2,2,2,8,0,0,1,2,2,2,2,4,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,22,10,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,2,2,23,23,2,2,2,2,2,2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,2,2,2,12,17,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,12,17,15,15,0,5,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,2,12,12,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,12,17,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,12,17,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,12,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,17,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			};
			int PosX = x - 22 * direction; //spawnX and spawnY is where you want the anchor to be when this generates
			int PosY = y - 14;
			//i = vertical, j = horizontal
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)    //Increase the iterations on this outermost for loop if tabletop-objects are not properly spawning
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j * direction;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									break;
								case 1:
									tile.active(true);
									tile.type = 1;
									tile.slope(0);
									tile.halfBrick(true);
									tile.wall = (ushort)WallID.Stone;
									break;
								case 2:
									tile.active(true);
									tile.type = 1;
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Stone;
									break;
								case 3:
									tile.active(true);
									tile.type = 1;
									tile.slope((byte)(direction == 1 ? 2 : 1));
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Stone;
									break;
								case 4:
									tile.active(true);
									tile.type = 1;
									tile.slope((byte)(direction == 1 ? 3 : 4));
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Stone;
									break;
								case 5:
									tile.active(true);
									tile.type = 1;
									tile.slope((byte)(direction == 1 ? 4 : 3));
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Stone;
									break;
								case 6:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 20, true, true, -1, 18);
										WorldGen.GrowPalmTree(k, l);
									}
									break;
								case 7:
									tile.active(true);
									tile.type = (ushort)ModContent.TileType<PyramidSlabTile>();
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.SandstoneBrick;
									break;
								case 8:
									tile.active(true);
									tile.type = 1;
									tile.slope((byte)(direction == 1 ? 1 : 2));
									tile.halfBrick(false);
									break;
								case 9:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, (ushort)ModContent.TileType<StrangeKeystoneTile>(), true, true, -1, 0);
									}
									break;
								case 10:
									tile.wall = (ushort)WallID.SandstoneBrick;
									break;
								case 11:
									tile.active(true);
									tile.type = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.GrassUnsafe;
									break;
								case 12:
									tile.active(true);
									tile.type = 53;
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Sandstone;
									break;
								case 13:
									tile.active(true);
									tile.type = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.slope(0);
									tile.halfBrick(true);
									tile.wall = (ushort)WallID.GrassUnsafe;
									break;
								case 14:
									tile.active(true);
									tile.type = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.slope((byte)(direction == 1 ? 1 : 2));
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.GrassUnsafe;
									break;
								case 15:
									tile.active(true);
									tile.type = 396;
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Sandstone;
									break;
								case 16:
									tile.active(true);
									tile.type = (ushort)ModContent.TileType<OvergrownPyramidTileSafe>();
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.GrassUnsafe;
									break;
								case 17:
									tile.active(true);
									tile.type = 397;
									tile.slope(0);
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Sandstone;
									break;
								case 19:
									tile.active(true);
									tile.type = 396;
									tile.slope((byte)(direction == 1 ? 3 : 4));
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Sandstone;
									break;
								case 20:
									tile.active(true);
									tile.type = 396;
									tile.slope((byte)(direction == 1 ? 4 : 3));
									tile.halfBrick(false);
									tile.wall = (ushort)WallID.Sandstone;
									break;
								case 21:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k - (direction != 1 ? 1 : 0), l, 376, true, true, -1, 0);
									}
									break;
								case 22:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k - (direction != 1 ? 1 : 0), l, 21, true, true, -1, 31);
										tile.wall = (ushort)WallID.SandstoneBrick;
									}
									break;
								case 23:
									tile.active(true);
									tile.type = 151;
									tile.slope(0);
									tile.halfBrick(false);
									break;
							}
						}
					}
				}
			}
		}
	}
}